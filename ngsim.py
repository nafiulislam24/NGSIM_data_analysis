# -*- coding: utf-8 -*-
"""NGSIM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ox7xwH7X084tq4atCsel_r27AOobhfVt
"""

from google.colab import drive
drive.mount('/content/drive')

"""**Loading the dataset from drive**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import Normalize
from matplotlib.cm import ScalarMappable


#assuming file in drive
data = pd.read_csv('/content/drive/MyDrive/NGSIM/Next_Generation_Simulation__NGSIM__Vehicle_Trajectories_and_Supporting_Data.csv')

data

"""**Column name**"""

data.columns

"""**Column types**"""

data.dtypes

"""**Name of location**"""

data['Location'].unique()

data['Vehicle_ID'].count()

"""**Vehicle class**"""

data['v_Class'].unique()

"""**US-101**"""

us_data = data[data['Location'] == 'us-101']
us_data

"""**Global time to LA time**"""

us_data['Global_Time'] = pd.to_datetime(us_data['Global_Time'], unit='ms')


us_data['Global_Time'] = us_data['Global_Time'].dt.tz_localize('UTC').dt.tz_convert('America/Los_Angeles')


print(us_data['Global_Time'].head())

us_data

"""**Spliting dataframe according to 15min interval**"""

periods = {
    'period1': (pd.Timestamp('2005-06-15 07:50:00', tz='America/Los_Angeles'),
                pd.Timestamp('2005-06-15 08:05:00', tz='America/Los_Angeles')),
    'period2': (pd.Timestamp('2005-06-15 08:05:00', tz='America/Los_Angeles'),
                pd.Timestamp('2005-06-15 08:20:00', tz='America/Los_Angeles')),
    'period3': (pd.Timestamp('2005-06-15 08:20:00', tz='America/Los_Angeles'),
                pd.Timestamp('2005-06-15 08:35:00', tz='America/Los_Angeles'))
}



df_period1 = us_data[(us_data['Global_Time'] >= periods['period1'][0]) & (us_data['Global_Time'] < periods['period1'][1])]
df_period2 = us_data[(us_data['Global_Time'] >= periods['period2'][0]) & (us_data['Global_Time'] < periods['period2'][1])]
df_period3 = us_data[(us_data['Global_Time'] >= periods['period3'][0]) & (us_data['Global_Time'] < periods['period3'][1])]

df_period1

"""**No. of Lane**"""

df_period1["Lane_ID"].unique()

df_period1["Section_ID"].unique()

"""**Let's check for Null value**"""

df_period1.info()

"""**Splitting dataframe according to lane no.**"""

df_lane1 = pd.DataFrame()
df_lane2 = pd.DataFrame()
df_lane3 = pd.DataFrame()
df_lane4 = pd.DataFrame()
df_lane5 = pd.DataFrame()
df_lane6 = pd.DataFrame()
df_lane7 = pd.DataFrame()
df_lane8 = pd.DataFrame()

for lane_id in df_period1['Lane_ID'].unique():
    if lane_id == 1:
        df_lane1 = df_period1[df_period1['Lane_ID'] == 1]
    elif lane_id == 2:
        df_lane2 = df_period1[df_period1['Lane_ID'] == 2]
    elif lane_id == 3:
        df_lane3 = df_period1[df_period1['Lane_ID'] == 3]
    elif lane_id == 4:
        df_lane4 = df_period1[df_period1['Lane_ID'] == 4]
    elif lane_id == 5:
        df_lane5 = df_period1[df_period1['Lane_ID'] == 5]
    elif lane_id == 6:
        df_lane6 = df_period1[df_period1['Lane_ID'] == 6]
    elif lane_id == 7:
        df_lane7 = df_period1[df_period1['Lane_ID'] == 7]
    elif lane_id == 8:
        df_lane8 = df_period1[df_period1['Lane_ID'] == 8]

df_lane1

df_lane1 = df_lane1.dropna(axis=1, how='any')

df_lane1

"""**Now we are ready for doing analysis for US-101 lane-1**"""

#total dataset
plt.figure(figsize=(10, 6))
plt.hist(data['v_Vel'], bins=50, color='skyblue', edgecolor='black')
plt.title('Velocity Distribution for NGSIM dataset')
plt.xlabel('Velocity (m/s)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

if 'v_Vel' in df_lane1.columns:
    df_lane1 = df_lane1.dropna(subset=['v_Vel'])
    df_lane1['v_Vel'] = pd.to_numeric(df_lane1['v_Vel'], errors='coerce')

    plt.figure(figsize=(10, 6))
    plt.hist(df_lane1['v_Vel'], bins=50, color='skyblue', edgecolor='black')
    plt.title('Velocity Distribution for Lane 1')
    plt.xlabel('Velocity (m/s)')
    plt.ylabel('Frequency')
    plt.grid(True)
    plt.show()
else:
    print("Error: 'v_Vel' column not found in df_lane1. Available columns:", df_lane1.columns)

df_lane1_filtered = df_lane1[df_lane1['Time_Headway'] > 0]

plt.figure(figsize=(10, 6))

plt.hist(df_lane1_filtered['Time_Headway'], bins=50, color='purple', edgecolor='black',
         range=(0, df_lane1_filtered['Time_Headway'].quantile(0.95)))
plt.title('Time Headway Distribution for Lane 1 (Excluding Zero)')
plt.xlabel('Time Headway (seconds)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

df_lane1_filtered = df_lane1[df_lane1['Space_Headway'] > 0]

plt.figure(figsize=(10, 6))

plt.hist(df_lane1_filtered['Space_Headway'], bins=50, color='green', edgecolor='black',
         range=(0, df_lane1_filtered['Space_Headway'].quantile(0.95)))
plt.title('Space Headway Distribution for Lane 1 (Excluding Zero)')
plt.xlabel('Space Headway (meters)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 7))
plt.scatter(df_lane1['Global_Time'], df_lane1['v_Vel'], s=10, color='blue')
plt.title('Velocity Over Time for Lane 1')
plt.xlabel('Time')
plt.ylabel('Velocity (m/s)')
plt.grid(True)
plt.show()

# import matplotlib.dates as mdates


# df_lane1 = df_lane1.sort_values(by='Global_Time')


# plt.figure(figsize=(14, 8))
# plt.scatter(df_lane1['Global_Time'], df_lane1['Local_Y'], s=1, c='blue')


# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M:%S'))
# plt.gca().xaxis.set_major_locator(mdates.MinuteLocator(interval=1))
# plt.gcf().autofmt_xdate()

# plt.title('Time-Space Diagram for Lane 1')
# plt.xlabel('Time')
# plt.ylabel('Position along Lane (meters)')
# plt.grid(True)
# plt.show()

df_lane1['Global_Time']

start_time = df_lane1['Global_Time'].min()

df_lane1['time_in_minutes'] = (df_lane1['Global_Time'] - start_time).dt.total_seconds() / 60.0

plt.figure(figsize=(50, 20))


for Vehicle_ID in df_lane1['Vehicle_ID'].unique():
    vehicle_data = df_lane1[df_lane1['Vehicle_ID'] == Vehicle_ID]
    plt.scatter(df_lane1['time_in_minutes'], df_lane1['Local_Y'], label=f'Vehicle {Vehicle_ID}', s=5)

plt.xlabel('Time (minutes)', fontsize=24)
plt.ylabel('Position (ft)', fontsize=24)
plt.title('Time-Space Diagram (Scatter Plot)', fontsize=30)
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.grid(True)
plt.show()

start_time = df_lane1['Global_Time'].min()
df_lane1['time_in_minutes'] = (df_lane1['Global_Time'] - start_time).dt.total_seconds() / 60.0


fig, ax = plt.subplots(figsize=(50, 20))


scatter = sns.scatterplot(data=df_lane1, x='time_in_minutes', y='Local_Y', hue='v_Vel', palette='inferno', size='v_Vel', sizes=(1, 2), legend=None, ax=ax)


norm = Normalize(vmin=df_lane1['v_Vel'].min(), vmax=df_lane1['v_Vel'].max())
sm = ScalarMappable(cmap="inferno", norm=norm)
sm.set_array([])
cbar = fig.colorbar(sm, ax=ax, fraction=0.02, pad=0.04)
cbar.set_label('Vehicle Speed (m/s)', size=24)

ax.set_xlabel('Time (minutes)', fontsize=24)
ax.set_ylabel('Position (meters)', fontsize=24)
ax.set_title('Time-Space Diagram with Speed Coloring', fontsize=30)
ax.tick_params(labelsize=20)
ax.grid(True)

plt.show()

df_lane1["Local_Y"].max()

df_lane1["Local_Y"].min()

"""Flow diagram"""

start = pd.Timestamp('2005-06-15 07:50:00-07:00')
end = pd.Timestamp('2005-06-15 08:35:00-07:00')


local_y_min = 20
local_y_max = 2100


filtered_data = df_lane1[
    (df_lane1['Local_Y'] >= local_y_min) &
    (df_lane1['Local_Y'] <= local_y_max) &
    (df_lane1['Global_Time'] >= start) &
    (df_lane1['Global_Time'] < end)
].copy()

filtered_data['Global_Time'] = pd.to_datetime(filtered_data['Global_Time'], unit='ms')


filtered_data.set_index('Global_Time', inplace=True)


aggregated_data = filtered_data.resample('1s').agg({
    'Time_Headway': 'mean',
    'Space_Headway': 'mean'
})

# Calculate flow and density
aggregated_data['flow'] = 3600 / aggregated_data['Time_Headway'].replace(0, pd.NA)
aggregated_data['density'] = 5280 / aggregated_data['Space_Headway'].replace(0, pd.NA)

# Reset index
aggregated_data.reset_index(inplace=True)

# Display the resulting aggregated data
print(aggregated_data.head())

plt.figure(figsize=(20, 10))

# Plot Flow
plt.subplot(2, 1, 1)
plt.plot(aggregated_data['Global_Time'], aggregated_data['flow'], marker='o', linestyle='-', markersize=5)
plt.title('Flow Over Time', fontsize=22)
plt.xlabel('Time', fontsize=18)
plt.ylabel('Flow (vehicles/hour)', fontsize=18)
plt.xticks(fontsize=16, rotation=45)
plt.yticks(fontsize=16)
plt.grid(True)

# Plot Density
plt.subplot(2, 1, 2)
plt.plot(aggregated_data['Global_Time'], aggregated_data['density'], marker='o', linestyle='-', markersize=5)
plt.title('Density Over Time', fontsize=22)
plt.xlabel('Time', fontsize=18)
plt.ylabel('Density (vehicles/mile)', fontsize=18)
plt.xticks(fontsize=16, rotation=45)
plt.yticks(fontsize=16)
plt.grid(True)

# Adjust layout and show the plot
plt.tight_layout()
plt.show()





# Plot Flow vs. Density
# We CAN DROP OUTLIER
plt.figure(figsize=(10, 6))
plt.scatter(aggregated_data['density'], aggregated_data['flow'], alpha=0.5, s=10, color='blue')
plt.title('Flow-Density Diagram (Lane ID-1)', fontsize=16)
plt.xlabel('Density (vehicles/mile)', fontsize=14)
plt.ylabel('Flow (vehicles/hour)', fontsize=14)
plt.xlim(0, 200)
plt.ylim(0, 4000)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)
plt.show()

# Calculate speed
aggregated_data['speed'] = aggregated_data['flow'] / aggregated_data['density']
# Plot Speed vs. Density
plt.figure(figsize=(10, 6))
plt.scatter(aggregated_data['density'], aggregated_data['speed'], alpha=0.5, s=10, color='red')
plt.title('Speed-Density Diagram (Lane#1)', fontsize=16)
plt.xlabel('Density (vehicles/mile)', fontsize=14)
plt.ylabel('Speed (miles/hour)', fontsize=14)
plt.xlim(0, 200)
plt.ylim(0, 50)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)
plt.show()

# Plot Speed vs. Flow
plt.figure(figsize=(10, 6))
plt.scatter(aggregated_data['flow'], aggregated_data['speed'], alpha=0.5, s=10, color='green')
plt.title('Speed-Flow Diagram (Lane#1)', fontsize=16)
plt.xlabel('Flow (vehicles/hour)', fontsize=14)
plt.ylabel('Speed (miles/hour)', fontsize=14)
plt.xlim(0, 4000)
plt.ylim(0, 50)  #
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.grid(True)
plt.show()

